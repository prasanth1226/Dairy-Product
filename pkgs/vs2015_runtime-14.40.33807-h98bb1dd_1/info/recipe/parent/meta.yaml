# version numbering is explained at https://devblogs.microsoft.com/cppblog/msvc-toolset-minor-version-number-14-40-in-vs-2022-v17-10/
#     This version number follows the "platform toolset"
{% set vcver="14.40" %}
{% set vsyear="2022" %}
# VS2022 is fundamentally compatible with VS2015.  We name our package vs2015_runtime so that it can't be
#    mixed up with the runtime from VS2015 - you do actually need VS2017 runtime for things compiled with
#    VS2019, VS2017, and the runtime we have here is backwards-compatible with things compiled with VS2015.
{% set runtime_year="2015" %}

package:
  name: vs_activation_and_runtime
  version: 1.0.0

build:
  skip: True # [not win]
  number: 1

outputs:
  - name: vs{{ vsyear }}_{{ cross_compiler_target_platform }}
    version: {{ cl_version }}
    script: install_activate.bat
    build:
      track_features:
        - vc{{ vcver.split(".")[0] }}
      run_exports:
        strong:
          # compatible within major version.  This is MSFT's incrementing of the UCRT version.  It was
          #    14.0 with VS2015, 14.1 with VS2017, 14.2 with VS2019 and now 14.40 with VS2022.
          #    If the major version changes, we're assuming that binary compatibility breaks.  
          #    This has a minimum bound equal to vcver, so building with vs2022 here will require 
          #    the vs2022-era runtime (the package is named vs2015_runtime, but the version differs)
          - {{ pin_subpackage('vc') }}
          - {{ pin_subpackage('vs' + runtime_year + '_runtime') }}
    requirements:
      build:
        - m2-sed
      run:
        - vswhere
    test:
      commands:
        - cl.exe
    about:
      summary: Activation and version verification of MSVC {{ vcver }} (VS {{ vsyear }} compiler, update {{ update_version }})
      license: BSD 3-clause
  - name: vs{{ runtime_year }}_runtime
    version: {{ runtime_version }}
    script: install_runtime.bat
    build:
      no_link:
        - |
          *.dll
        - Library/bin/*.dll
      missing_dso_whitelist:
        - "*.dll"
        - "*.DLL"
    requirements:
      build:
        - vswhere
    about:
      summary: MSVC runtimes associated with cl.exe version {{ cl_version  }} (VS {{ vsyear }} update {{ update_version }})
  - name: vc
    version: "{{ vcver }}"
    build:
      track_features:
        - vc{{ vcver.split(".")[0] }}
    requirements:
      run:
        # Set lower bound for runtime (no upper bound).  Upper bound is still present, but
        #    it's part of the run_exports for the compiler: assume that when vcver's major version changes,
        #    MSFT has broken our binary compatibility.
        - {{ pin_subpackage('vs' ~ runtime_year ~ '_runtime', max_pin=None) }}
    about:
      home: https://github.com/conda/conda/wiki/VC-features
      license: BSD-3-Clause
      license_file: {{ RECIPE_DIR }}/LICENSE
      license_family: BSD
      summary: A meta-package to impose mutual exclusivity among software built with different VS versions
      description: |
          This metapackage is used to enforce consistency of runtime
          dependencies within an environment
      doc_url: https://github.com/conda/conda/wiki/VC-features
      dev_url: https://github.com/conda/conda/wiki/VC-features
